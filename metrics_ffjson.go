// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: metrics.go
// DO NOT EDIT!

package rex

import (
	"bytes"
	"fmt"

	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *MetricEvent) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *MetricEvent) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.Name) != 0 {
		buf.WriteString(`"name":`)
		fflib.WriteJsonString(buf, string(mj.Name))
		buf.WriteByte(',')
	}
	if len(mj.Type) != 0 {
		buf.WriteString(`"type":`)
		fflib.WriteJsonString(buf, string(mj.Type))
		buf.WriteByte(',')
	}
	if mj.Value != 0 {
		buf.WriteString(`"value":`)
		fflib.FormatBits2(buf, uint64(mj.Value), 10, mj.Value < 0)
		buf.WriteByte(',')
	}
	if mj.M1 != 0 {
		buf.WriteString(`"m1":`)
		fflib.FormatBits2(buf, uint64(mj.M1), 10, mj.M1 < 0)
		buf.WriteByte(',')
	}
	if mj.Min != 0 {
		buf.WriteString(`"min":`)
		fflib.FormatBits2(buf, uint64(mj.Min), 10, mj.Min < 0)
		buf.WriteByte(',')
	}
	if mj.Max != 0 {
		buf.WriteString(`"max":`)
		fflib.FormatBits2(buf, uint64(mj.Max), 10, mj.Max < 0)
		buf.WriteByte(',')
	}
	if mj.Mean != 0 {
		buf.WriteString(`"mean":`)
		fflib.AppendFloat(buf, float64(mj.Mean), 'g', -1, 64)
		buf.WriteByte(',')
	}
	if mj.Stddev != 0 {
		buf.WriteString(`"stddev":`)
		fflib.AppendFloat(buf, float64(mj.Stddev), 'g', -1, 64)
		buf.WriteByte(',')
	}
	if mj.P50 != 0 {
		buf.WriteString(`"p50":`)
		fflib.FormatBits2(buf, uint64(mj.P50), 10, mj.P50 < 0)
		buf.WriteByte(',')
	}
	if mj.P75 != 0 {
		buf.WriteString(`"p75":`)
		fflib.FormatBits2(buf, uint64(mj.P75), 10, mj.P75 < 0)
		buf.WriteByte(',')
	}
	if mj.P95 != 0 {
		buf.WriteString(`"p95":`)
		fflib.FormatBits2(buf, uint64(mj.P95), 10, mj.P95 < 0)
		buf.WriteByte(',')
	}
	if mj.P99 != 0 {
		buf.WriteString(`"p99":`)
		fflib.FormatBits2(buf, uint64(mj.P99), 10, mj.P99 < 0)
		buf.WriteByte(',')
	}
	if mj.P999 != 0 {
		buf.WriteString(`"p999":`)
		fflib.FormatBits2(buf, uint64(mj.P999), 10, mj.P999 < 0)
		buf.WriteByte(',')
	}
	if len(mj.Ts) != 0 {
		buf.WriteString(`"ts":`)
		fflib.WriteJsonString(buf, string(mj.Ts))
		buf.WriteByte(',')
	}
	if len(mj.Service) != 0 {
		buf.WriteString(`"service":`)
		fflib.WriteJsonString(buf, string(mj.Service))
		buf.WriteByte(',')
	}
	if len(mj.Environment) != 0 {
		buf.WriteString(`"env":`)
		fflib.WriteJsonString(buf, string(mj.Environment))
		buf.WriteByte(',')
	}
	if len(mj.Cluster) != 0 {
		buf.WriteString(`"cluster":`)
		fflib.WriteJsonString(buf, string(mj.Cluster))
		buf.WriteByte(',')
	}
	if len(mj.Host) != 0 {
		buf.WriteString(`"host":`)
		fflib.WriteJsonString(buf, string(mj.Host))
		buf.WriteByte(',')
	}
	if len(mj.Release) != 0 {
		buf.WriteString(`"release":`)
		fflib.WriteJsonString(buf, string(mj.Release))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_MetricEventbase = iota
	ffj_t_MetricEventno_such_key

	ffj_t_MetricEvent_Name

	ffj_t_MetricEvent_Type

	ffj_t_MetricEvent_Value

	ffj_t_MetricEvent_M1

	ffj_t_MetricEvent_Min

	ffj_t_MetricEvent_Max

	ffj_t_MetricEvent_Mean

	ffj_t_MetricEvent_Stddev

	ffj_t_MetricEvent_P50

	ffj_t_MetricEvent_P75

	ffj_t_MetricEvent_P95

	ffj_t_MetricEvent_P99

	ffj_t_MetricEvent_P999

	ffj_t_MetricEvent_Ts

	ffj_t_MetricEvent_Service

	ffj_t_MetricEvent_Environment

	ffj_t_MetricEvent_Cluster

	ffj_t_MetricEvent_Host

	ffj_t_MetricEvent_Release
)

var ffj_key_MetricEvent_Name = []byte("name")

var ffj_key_MetricEvent_Type = []byte("type")

var ffj_key_MetricEvent_Value = []byte("value")

var ffj_key_MetricEvent_M1 = []byte("m1")

var ffj_key_MetricEvent_Min = []byte("min")

var ffj_key_MetricEvent_Max = []byte("max")

var ffj_key_MetricEvent_Mean = []byte("mean")

var ffj_key_MetricEvent_Stddev = []byte("stddev")

var ffj_key_MetricEvent_P50 = []byte("p50")

var ffj_key_MetricEvent_P75 = []byte("p75")

var ffj_key_MetricEvent_P95 = []byte("p95")

var ffj_key_MetricEvent_P99 = []byte("p99")

var ffj_key_MetricEvent_P999 = []byte("p999")

var ffj_key_MetricEvent_Ts = []byte("ts")

var ffj_key_MetricEvent_Service = []byte("service")

var ffj_key_MetricEvent_Environment = []byte("env")

var ffj_key_MetricEvent_Cluster = []byte("cluster")

var ffj_key_MetricEvent_Host = []byte("host")

var ffj_key_MetricEvent_Release = []byte("release")

func (uj *MetricEvent) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *MetricEvent) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_MetricEventbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_MetricEventno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_MetricEvent_Cluster, kn) {
						currentKey = ffj_t_MetricEvent_Cluster
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_MetricEvent_Environment, kn) {
						currentKey = ffj_t_MetricEvent_Environment
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffj_key_MetricEvent_Host, kn) {
						currentKey = ffj_t_MetricEvent_Host
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_MetricEvent_M1, kn) {
						currentKey = ffj_t_MetricEvent_M1
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_MetricEvent_Min, kn) {
						currentKey = ffj_t_MetricEvent_Min
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_MetricEvent_Max, kn) {
						currentKey = ffj_t_MetricEvent_Max
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_MetricEvent_Mean, kn) {
						currentKey = ffj_t_MetricEvent_Mean
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffj_key_MetricEvent_Name, kn) {
						currentKey = ffj_t_MetricEvent_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_MetricEvent_P50, kn) {
						currentKey = ffj_t_MetricEvent_P50
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_MetricEvent_P75, kn) {
						currentKey = ffj_t_MetricEvent_P75
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_MetricEvent_P95, kn) {
						currentKey = ffj_t_MetricEvent_P95
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_MetricEvent_P99, kn) {
						currentKey = ffj_t_MetricEvent_P99
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_MetricEvent_P999, kn) {
						currentKey = ffj_t_MetricEvent_P999
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_MetricEvent_Release, kn) {
						currentKey = ffj_t_MetricEvent_Release
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_MetricEvent_Stddev, kn) {
						currentKey = ffj_t_MetricEvent_Stddev
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_MetricEvent_Service, kn) {
						currentKey = ffj_t_MetricEvent_Service
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_MetricEvent_Type, kn) {
						currentKey = ffj_t_MetricEvent_Type
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_MetricEvent_Ts, kn) {
						currentKey = ffj_t_MetricEvent_Ts
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffj_key_MetricEvent_Value, kn) {
						currentKey = ffj_t_MetricEvent_Value
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_MetricEvent_Release, kn) {
					currentKey = ffj_t_MetricEvent_Release
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_MetricEvent_Host, kn) {
					currentKey = ffj_t_MetricEvent_Host
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_MetricEvent_Cluster, kn) {
					currentKey = ffj_t_MetricEvent_Cluster
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_MetricEvent_Environment, kn) {
					currentKey = ffj_t_MetricEvent_Environment
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_MetricEvent_Service, kn) {
					currentKey = ffj_t_MetricEvent_Service
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_MetricEvent_Ts, kn) {
					currentKey = ffj_t_MetricEvent_Ts
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_MetricEvent_P999, kn) {
					currentKey = ffj_t_MetricEvent_P999
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_MetricEvent_P99, kn) {
					currentKey = ffj_t_MetricEvent_P99
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_MetricEvent_P95, kn) {
					currentKey = ffj_t_MetricEvent_P95
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_MetricEvent_P75, kn) {
					currentKey = ffj_t_MetricEvent_P75
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_MetricEvent_P50, kn) {
					currentKey = ffj_t_MetricEvent_P50
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_MetricEvent_Stddev, kn) {
					currentKey = ffj_t_MetricEvent_Stddev
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_MetricEvent_Mean, kn) {
					currentKey = ffj_t_MetricEvent_Mean
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_MetricEvent_Max, kn) {
					currentKey = ffj_t_MetricEvent_Max
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_MetricEvent_Min, kn) {
					currentKey = ffj_t_MetricEvent_Min
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_MetricEvent_M1, kn) {
					currentKey = ffj_t_MetricEvent_M1
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_MetricEvent_Value, kn) {
					currentKey = ffj_t_MetricEvent_Value
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_MetricEvent_Type, kn) {
					currentKey = ffj_t_MetricEvent_Type
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_MetricEvent_Name, kn) {
					currentKey = ffj_t_MetricEvent_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_MetricEventno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_MetricEvent_Name:
					goto handle_Name

				case ffj_t_MetricEvent_Type:
					goto handle_Type

				case ffj_t_MetricEvent_Value:
					goto handle_Value

				case ffj_t_MetricEvent_M1:
					goto handle_M1

				case ffj_t_MetricEvent_Min:
					goto handle_Min

				case ffj_t_MetricEvent_Max:
					goto handle_Max

				case ffj_t_MetricEvent_Mean:
					goto handle_Mean

				case ffj_t_MetricEvent_Stddev:
					goto handle_Stddev

				case ffj_t_MetricEvent_P50:
					goto handle_P50

				case ffj_t_MetricEvent_P75:
					goto handle_P75

				case ffj_t_MetricEvent_P95:
					goto handle_P95

				case ffj_t_MetricEvent_P99:
					goto handle_P99

				case ffj_t_MetricEvent_P999:
					goto handle_P999

				case ffj_t_MetricEvent_Ts:
					goto handle_Ts

				case ffj_t_MetricEvent_Service:
					goto handle_Service

				case ffj_t_MetricEvent_Environment:
					goto handle_Environment

				case ffj_t_MetricEvent_Cluster:
					goto handle_Cluster

				case ffj_t_MetricEvent_Host:
					goto handle_Host

				case ffj_t_MetricEvent_Release:
					goto handle_Release

				case ffj_t_MetricEventno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: uj.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Value:

	/* handler: uj.Value type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Value = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_M1:

	/* handler: uj.M1 type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.M1 = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Min:

	/* handler: uj.Min type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Min = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Max:

	/* handler: uj.Max type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Max = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Mean:

	/* handler: uj.Mean type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Mean = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Stddev:

	/* handler: uj.Stddev type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Stddev = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_P50:

	/* handler: uj.P50 type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.P50 = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_P75:

	/* handler: uj.P75 type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.P75 = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_P95:

	/* handler: uj.P95 type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.P95 = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_P99:

	/* handler: uj.P99 type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.P99 = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_P999:

	/* handler: uj.P999 type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.P999 = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ts:

	/* handler: uj.Ts type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Ts = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Service:

	/* handler: uj.Service type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Service = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Environment:

	/* handler: uj.Environment type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Environment = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Cluster:

	/* handler: uj.Cluster type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Cluster = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Host:

	/* handler: uj.Host type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Host = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Release:

	/* handler: uj.Release type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Release = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *MetricsTicker) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *MetricsTicker) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{}`)
	return nil
}

const (
	ffj_t_MetricsTickerbase = iota
	ffj_t_MetricsTickerno_such_key
)

func (uj *MetricsTicker) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *MetricsTicker) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_MetricsTickerbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_MetricsTickerno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				}

				currentKey = ffj_t_MetricsTickerno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_MetricsTickerno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
