// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package rex

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson2220f231DecodeGithubComRemergeRex(in *jlexer.Lexer, out *MetricsTicker) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson2220f231EncodeGithubComRemergeRex(out *jwriter.Writer, in MetricsTicker) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricsTicker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeGithubComRemergeRex(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricsTicker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeGithubComRemergeRex(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricsTicker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeGithubComRemergeRex(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricsTicker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeGithubComRemergeRex(l, v)
}
func easyjson2220f231DecodeGithubComRemergeRex1(in *jlexer.Lexer, out *MetricEvent) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = int64(in.Int64())
		case "m1":
			out.M1 = int64(in.Int64())
		case "min":
			out.Min = int64(in.Int64())
		case "max":
			out.Max = int64(in.Int64())
		case "mean":
			out.Mean = float64(in.Float64())
		case "stddev":
			out.Stddev = float64(in.Float64())
		case "p50":
			out.P50 = int64(in.Int64())
		case "p75":
			out.P75 = int64(in.Int64())
		case "p95":
			out.P95 = int64(in.Int64())
		case "p99":
			out.P99 = int64(in.Int64())
		case "p999":
			out.P999 = int64(in.Int64())
		case "ts":
			out.Ts = string(in.String())
		case "service":
			out.Service = string(in.String())
		case "env":
			out.Environment = string(in.String())
		case "cluster":
			out.Cluster = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "release":
			out.Release = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson2220f231EncodeGithubComRemergeRex1(out *jwriter.Writer, in MetricEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Type != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"type\":")
		out.String(string(in.Type))
	}
	if in.Value != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.Int64(int64(in.Value))
	}
	if in.M1 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"m1\":")
		out.Int64(int64(in.M1))
	}
	if in.Min != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"min\":")
		out.Int64(int64(in.Min))
	}
	if in.Max != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"max\":")
		out.Int64(int64(in.Max))
	}
	if in.Mean != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mean\":")
		out.Float64(float64(in.Mean))
	}
	if in.Stddev != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"stddev\":")
		out.Float64(float64(in.Stddev))
	}
	if in.P50 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"p50\":")
		out.Int64(int64(in.P50))
	}
	if in.P75 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"p75\":")
		out.Int64(int64(in.P75))
	}
	if in.P95 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"p95\":")
		out.Int64(int64(in.P95))
	}
	if in.P99 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"p99\":")
		out.Int64(int64(in.P99))
	}
	if in.P999 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"p999\":")
		out.Int64(int64(in.P999))
	}
	if in.Ts != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ts\":")
		out.String(string(in.Ts))
	}
	if in.Service != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"service\":")
		out.String(string(in.Service))
	}
	if in.Environment != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"env\":")
		out.String(string(in.Environment))
	}
	if in.Cluster != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cluster\":")
		out.String(string(in.Cluster))
	}
	if in.Host != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"host\":")
		out.String(string(in.Host))
	}
	if in.Release != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"release\":")
		out.String(string(in.Release))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeGithubComRemergeRex1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeGithubComRemergeRex1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeGithubComRemergeRex1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeGithubComRemergeRex1(l, v)
}
